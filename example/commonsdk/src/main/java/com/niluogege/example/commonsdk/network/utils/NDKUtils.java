package com.niluogege.example.commonsdk.network.utils;

import com.aihuishou.httplib.HttpBaseContext;

import java.io.InputStream;

/**
 * Created by LuoChen on 2017/11/17.
 * 该类用于加密 访问网络是所用的签名
 */

public class NDKUtils {

    public static final byte[] bytes = {8, -70, 60, -123, 58, 57, 56, 8, 53, 62, 49, 18, -66, 112, -66, -49, 53, 57, 57, 57, 61, 56, 60, -70, 60, -97, 8, -70, 60, -101, 58, 57, 56, 58, -70, 57, 57, 56, -21, -83, 72, -77, 42, 40, -69, 82, -22, 57, 120, 68, -43, 20, 80, 7, 51, 49, -41, -6, 77, -49, -66, 76, -62, -19, -119, 126, -36, 65, 46, -70, 34, 49, 15, 68, 47, 99, -15, 60, 79, -106, 111, -127, -7, -96, 39, -4, -6, 54, -41, 100, -59, -77, -115, 77, 9, 23, 95, 57, -39, 37, 100, 88, 99, 20, 112, 103, -22, 110, 19, 48, -10, -84, 36, 86, 44, -56, -45, -60, 124, 66, -7, -90, -47, 59, -117, -55, 0, -102, 61, -107, -111, 76, 114, 0, -42, -86, 1, -73, -25, -126, -15, -95, -9, 55, -75, 31, 111, 21, 7, -39, -103, -71, 13, -38, 111, 5, -107, -125, 23, -49, 28, -128, 45, 104, 8, -89, 50, -122, 60, -124, -40, -53, -43, -20, 11, -19, -115, -64, 98, -86, -103, -3, -89, -24, -22, 30, 119, 83, -105, 72, -115, -23, 56, 60, 0, 67, 89, 16, -71, -104, -75, -23, -12, -128, -36, -43, -128, 91, -42, 72, 118, -79, 27, 75, 12, -57, 86, -4, -126, -62, 78, 85, -27, -119, -25, 68, 119, -114, -118, 81, 20, -87, -48, 4, -83, 31, -27, -122, -37, -106, -82, 73, -122, -118, 64, -48, -34, -122, -48, -5, -13, 9, -39, 24, -74, -29, -83, 93, -85, 92, -112, -15, -38, 50, 69, 44, -118, 109, -113, 54, 32, -61, -23, -26, 127, -89, 83, -66, -16, -98, -82, -101, -77, 11, 35, 94, 6, 23, 16, 5, 91, -78, 117, 125, 58, 59, 57, 56, 57, 58, -70, 57, 56, 119, -14, -92, -75, -99, -125, 98, -68, 55, 4, 87, -104, 85, 29, 57, 55, 5, 119, 66, -58, -89, -20, 7, -59, -89, -82, -116, -45, 26, 120, 107, -41, -106, 79, -47, 111, -121, -13, 98, 84, 79, -39, -36, -107, 93, -1, -5, -125, 124, -25, -118, -57, 27, -86, -45, 108, -75, -122, -43, -90, -116, -23, -80, -5, -7, -122, 98, 72, -40, 78, -100, 78, 62, -15, -106, 115, 49, 108, -107, -62, 53, -107, 17, -83, -73, 44, 97, 80, -9, -11, -118, 116, -70, -78, 35, 87, -78, -56, -20, 50, 88, -62, 29, 50, -57, 38, 123, 122, 25, -13, 19, -125, 24, 96, 61, 61, 37, -81, 90, 52, 28, -85, -84, 90, 91, -73, 121, 14, 33, 69, 72, -4, -35, -9, 8, 66, -65, -58, 86, -11, -18, 101, 112, -4, -20, -33, -44, -114, -21, 65, -84, -100, 122, -72, 42, -6, 13, -4, -110, 101, 101, -24, -29, -101, 119, -38, 43, 13, -108, 6, -89, 15, 21, 31, -72, -12, 82, -11, -43, -112, 23, 32, -3, -109, 71, 33, -120, 107, 66, 33, -102, 13, 106, 82, 86, -114, -115, -103, 13, -123, -15, 18, 41, 117, -29, 126, 39, 104, -2, -10, -97, -54, -43, -118, 31, 106, 117, -72, 81, -7, 81, 8, -127, -79, 54, -121, 12, -58, -66, 1, 106, 27, -55, -77, -95, -73, 33, 100, -97, -47, 3, 57, 100, 17, 82, 116, -90, -17, 22, 62, 95, 52, -49, 59, -43, 29, 58, -71, -71, 56, -54, 110, -55, 5, 59, -50, -28, -4, 46, 3, -8, 59, -125, 34, -91, 91, 62, -89, 31, 9, -47, -75, 112, 102, -114, 55, 94, -45, -112, 52, 95, -121, -87, -127, 73, 38, 81, 72, 111, 116, 19, -79, -67, -3, -60, -69, 95, -5, -79, 89, -39, 76, 45, 38, -63, 109, -13, -114, -92, 84, -26, 67, 87, 112, -59, -100, -64, -55, 15, -49, -35, -96, -50, -42, 48, -105, -98, 104, 95, 108, 119, -56, -8, -61, 83, -1, 107, -99, -91, -100, -22, -117, -22, 32, 32, 112, 94, -54, -22, -43, -4, -40, 107, -96, 102, -113, 78, -12, 33, 81, 120, -13, -59, -119, -96, -115, 63, -46, -117, -68, 81, 36, 45, 76, -29, -99, 87, 107, 58, -71, -71, 56, -25, -70, -107, -70, -102, 34, 32, -43, 65, 18, -9, 86, 97, 87, -6, -98, -12, -99, 31, 83, -69, -73, -112, -3, -51, 66, 122, 101, 91, 88, -77, 112, 118, -110, -101, 53, -124, 81, 27, -79, 20, 125, 79, 32, -103, 105, 36, 57, -8, 70, 94, -67, -31, 67, -67, -57, -13, 44, 32, -103, -4, 2, -14, -61, -81, -85, 93, -44, -75, -76, -21, 88, -70, -17, -104, 87, 121, 75, -58, 54, 78, 60, 65, -16, 46, 36, 65, 31, 16, 109, 51, 70, 30, -21, -27, 109, 68, -116, -89, -84, 113, 11, -103, -118, -33, -29, -73, -29, -38, 103, 115, -16, -87, -34, 48, 66, -70, 60, -10, -128, 25, -9, -122, -125, -47, -60, 78, 63, 58, -71, -72, 107, -27, 74, -106, -6, -48, 75, -74, 48, -69, -116, -49, -83, -88, -112, 110, -20, -125, -9, 4, -90, -106, -90, 44, -48, -124, 67, -15, -103, -34, 81, 25, 50, -115, 2, 112, 92, 60, -20, -119, 23, 71, -56, 27, -76, 15, -75, 65, 125, -31, -55, -5, -22, 83, 101, -106, 19, 113, -74, -48, -122, 13, -15, 109, 89, 9, -42, 108, -12, 25, -99, -61, 121, -127, 22, -96, 98, -26, 48, 92, 117, 29, -44, 27, 46, 9, 84, -47, 19, -91, 46, -107, -20, 119, 10, 96, 36, 48, 68, -98, 68, 11, -67, -126, 69, 116, -24, 79, -39, 75, 91, 105, 13, 58, 64, -42, 85, 126, -53, -15, 30, -50, -47, 45, -57, -11, 112, -119, 58, -71, -71, 56, -110, -102, -80, 14, -73, -44, -26, -83, 61, -79, 42, 101, -77, 64, 40, 25, -47, 88, 0, -75, 43, 38, 84, -31, -28, -69, -89, 56, -10, -46, -96, -14, -50, 51, -123, 65, -118, 34, -74, 103, -91, -35, -18, 67, 70, 124, 70, -26, 11, -80, 52, 99, 17, 90, -43, 13, 40, 91, -38, 6, 13, -102, 8, -41, 52, -84, 26, 39, 51, 37, -115, 54, 36, 13, -36, 20, -109, -14, -86, -43, -83, 97, -45, 91, 6, -2, 12, 44, 33, -43, 67, 101, -106, -36, -18, 15, -62, -71, -98, -2, -123, 87, -34, -67, -8, 54, -18, 72, 31, 53, 99, -124, -26, -43, -8, 41, 119, 51, -122, -79, -6, 70, 80, 69, -45, -105, -110, -97, 58, -71, -72, 59, -75, -75, 34, -64, 107, 105, 87, 117, 85, 55, -126, 91, -17, -87, 91, 36, 120, -15, -48, 48, -51, -21, -84, -110, 120, -9, 72, -23, 59, -35, -1, 79, -65, 108, -70, 96, 18, 56, 39, -40, -72, -26, 29, 108, -74, 5, 77, 112, -5, 95, 125, -91, 107, 69, 88, 85, 104, -9, -98, 36, -56, 35, 49, -83, 38, -84, -22, 76, -108, 83, -21, -72, 28, -102, -35, -100, -114, -8, -37, 57, -93, 2, 64, -40, -105, 123, -76, -98, 6, 95, -84, -113, -77, -71, 16, -41, 86, 85, 72, -52, -29, 37, 123, 74, -105, 93, -94, 97, 24, -72, 47, 94, 56, -32, -31, -110, -105, -1, 63, 54, -88, -6, 120, 97, -97, 84, -62};
    public static final String UUID_2 = "2B556F75";

    private static boolean isNotShowLog = false;


    // Used to load the 'native-lib' library on application startup.
    static {
        System.loadLibrary("native-lib");
    }

    /**
     * 加密
     *
     * @param bytes    未加密的byte数组
     * @param password 加密所用的 password
     * @return
     */
    public static native byte[] encrypt(byte[] bytes, String password);


    /**
     * 解密
     *
     * @param bytes    加密了的byte数组
     * @param password 解密所用的 password
     * @return
     */
    public static native byte[] decode(byte[] bytes, String password);


    /**
     * 将key文件内容读出转换成byte[]
     *
     * @param keyName key文件名 需要经文件放到 assets文件夹下
     * @return
     */
    public static byte[] convertFile2ByteArray(String keyName) {

        byte[] bytes = null;

        try {
            InputStream is = HttpBaseContext.getContext().getAssets().open(keyName);
            int size = is.available();

            // Read the entire asset into a local byte buffer.
            byte[] buffer = new byte[size];
            is.read(buffer);
            is.close();

            bytes = buffer;

            StringBuilder sb = new StringBuilder();
            for (byte aByte : bytes) {
                sb.append(aByte + ",");
            }
            e("NDKUtils", "读取文件成功 " + " 加密前长度=" + bytes.length);
            e("NDKUtils", sb.toString());
        } catch (Exception e) {
            e("NDKUtils", "读取文件失败 ");
            e.printStackTrace();
        }

        return bytes;
    }


    /**
     * 获取加密后的byte数组,并将结果打印到控制台上
     *
     * @param keyName  key文件名 需要经文件放到 assets文件夹下
     * @param password 加密用的passwable
     * @return
     */
    public static byte[] getEncryptByteArray(String keyName, String password) {
        byte[] bytes = convertFile2ByteArray(keyName);
        byte[] encrypt = encrypt(bytes, password);


        StringBuilder sb = new StringBuilder();
        for (byte aByte : encrypt) {
            sb.append(aByte + ",");
        }
        e("NDKUtils", " 加密后长度=" + encrypt.length);
        e("NDKUtils", sb.toString());


        return encrypt;
    }


    /**
     * 截断输出日志  用于打印日志过长,显示不完整的问题
     *
     * @param msg
     */
    public static void e(String tag, String msg) {
        if (isNotShowLog || tag == null || tag.length() == 0 || msg == null || msg.length() == 0)
            return;

        int segmentSize = 3 * 1024;
        long length = msg.length();
        if (length <= segmentSize) {// 长度小于等于限制直接打印
            LogUtil.e(tag, msg);
        } else {
            while (msg.length() > segmentSize) {// 循环分段打印日志
                String logContent = msg.substring(0, segmentSize);
                msg = msg.replace(logContent, "");
                LogUtil.e(tag, logContent);
            }
            LogUtil.e(tag, msg);// 打印剩余日志
        }
    }

}
